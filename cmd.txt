常用命令
//git config设置的东西都可以在.gitconfig文件找到
//申明自己的名字和email
git config --global user.name "Name"
git config --global user.email "Email"
//设置代理
git config --global http.proxy ip:port
git config --global https.proxy ip:port
git config --global http.sslverify false
git config --global color.ui true

//修改名称别名,如果name 是带空格多个词则用单引号隔开
git config --global alias.<aname> <name>

/** 添加修改到stage **/
git add

// 提交修改到branch, -m 后跟修改的描述
git commit -m "desc"

//查看当前工作区的状态
git status

//上次修改的对比显示
git diff  fileName
//查看工作区和版本库里面最新版本的区别 
git diff HEAD -- fileName

//查看文件修改记录, --pretty=oneline简略成一行显示
git log --pretty=oneline (--aabrev-commit)
//查看最后一次修改
git log -1

//恢复之前的版本
git reset --hard versionID（HEAD^ 接 ~num)
//将stage中的内容撤销到工作区中
git reset HEAD fileName

//查看最近修改的版本的versionID
git reflog (接fileName)

//撤销工作区相对于stage 或者 branch的修改
git checkout -- fileName

//用于删除一个已经提交到版本库的文件
git rm fileName

//关联远程库， ssh & https 方式
git remote add origin git@github.com:xanxusldw/learngit.git
git remote add origin https://github.com/xanxusldw/learngit.git

//删除远程库
git remote rm origin

//本地库内容推送到远程库
git push -u origin master

//克隆一个仓库
git clone

//mater分支是一条线，git用master指向最新的提交，再用HEAD指向master。  mater 指向提交， HEAD指向当前分支。
//查看分支
git branch
//创建分支
git branch <name>
//切换分支
git checkout <name>
//创建+切换分支
git checkout -b <name>
//合并某分支到当前分支
git merge <name>
//删除分支
git branch -d <name>
//强行删除分支
git branch -D <name>

//查看冲突合并情况
git log --graph --pretty=oneline --abbrev-commit

//保存当前工作现场
git stash
//恢复不删除工作现场内容
git stash apply
//删除工作现场
git stash drop
//恢复并删除stash
git stash pop
//查看是否有stash 内容
git stash list

//查看远程库信息
git remote (-v)
//推送分支
git push origin <branch-name>
//抓取分支
git clone <remote-addr>
//创建远程origin的dev分支到本地
git checkout -b dev origin/dev
//指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream dev origin/dev
git branch --set-upstream-to=origin/dev dev
//抓取远程分支最新的提交，然后可以处理与本地冲突的合并
git pull


//创建标签
git tag -a <name> -m <description> <commitId>
//查看所有tag
git tag
//查看特定的tag
git show <tagname>
//pgp 签名标签
git tag -s <tagname> -m <description> <commitId>
//删除标签
git tag -d v0.1
//推送标签到远程服务器
git push origin <tagname>
//一次性推送所有标签到远程服务器
git push origin --tags
//删除远程标签
git tag -d <tagname> //本地删
git push origin :refs/tags/<tagname>
or git push origin --delete tag <tagname>


//fork & clone & pull request

//add .gitignore to your workspace, then you can add igonred file or regex to filter these files
//强制添加过滤的文件
git add -f <file-name>
//检查过滤文件的匹配项
git check-ignore -v <name>




